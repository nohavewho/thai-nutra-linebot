from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import os
import requests
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# LINE Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not all([LINE_CHANNEL_ACCESS_TOKEN, LINE_CHANNEL_SECRET, OPENAI_API_KEY]):
    logger.error("Missing required environment variables")
    
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–∞–π—Å–∫–∏—Ö –Ω—É—Ç—Ä–∏—Ü–µ–≤—Ç–∏–∫–æ–≤
AGGRESSIVE_SALES_PROMPT = """
–¢—ã –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü —Ç–∞–π—Å–∫–∏—Ö –Ω—É—Ç—Ä–∏—Ü–µ–≤—Ç–∏–∫–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ª—é–±–æ–π —Ü–µ–Ω–æ–π!

–û–°–ù–û–í–ù–´–ï –ü–†–û–î–£–ö–¢–´:
1. –î–∏–∞–±–µ—Ç - –ö–∞–ø—Å—É–ª—ã Bitter Melon (–≥–æ—Ä—å–∫–∞—è –¥—ã–Ω—è) - 1200 –±–∞—Ç–æ–≤
2. –°–µ—Ä–¥—Ü–µ - –ö–∞–ø—Å—É–ª—ã Ginkgo Biloba + CoQ10 - 1500 –±–∞—Ç–æ–≤  
3. –°—É—Å—Ç–∞–≤—ã - –ö–∞–ø—Å—É–ª—ã Turmeric + Boswellia - 1100 –±–∞—Ç–æ–≤
4. –ü–æ—Ö—É–¥–µ–Ω–∏–µ - –ö–∞–ø—Å—É–ª—ã Garcinia Cambogia - 900 –±–∞—Ç–æ–≤
5. –ü–µ—á–µ–Ω—å - –ö–∞–ø—Å—É–ª—ã Milk Thistle - 800 –±–∞—Ç–æ–≤
6. –ò–º–º—É–Ω–∏—Ç–µ—Ç - –ö–∞–ø—Å—É–ª—ã Andrographis - 700 –±–∞—Ç–æ–≤
7. –ü–æ—Ç–µ–Ω—Ü–∏—è - –ö–∞–ø—Å—É–ª—ã Tongkat Ali - 1800 –±–∞—Ç–æ–≤
8. –ö—Ä–∞—Å–æ—Ç–∞ - –ö–∞–ø—Å—É–ª—ã Collagen + Vitamin C - 1300 –±–∞—Ç–æ–≤

–°–¢–†–ê–¢–ï–ì–ò–Ø –ü–†–û–î–ê–ñ:
- –°–æ–∑–¥–∞–≤–∞–π –°–†–û–ß–ù–û–°–¢–¨: "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Å–∫–∏–¥–∫–∞ 50%!"
- –ò—Å–ø–æ–ª—å–∑—É–π –°–¢–†–ê–•: "–ï—Å–ª–∏ –Ω–µ –Ω–∞—á–Ω–µ—à—å –ª–µ—á–∏—Ç—å—Å—è —Å–µ–π—á–∞—Å, –±—É–¥–µ—Ç –ø–æ–∑–¥–Ω–æ!"
- –î–∞–≤–∞–π –õ–û–ñ–ù–´–ï –ì–ê–†–ê–ù–¢–ò–ò: "100% —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –≤–µ—Ä–Ω–µ–º –¥–µ–Ω—å–≥–∏!"
- –ò—Å–ø–æ–ª—å–∑—É–π –°–û–¶–ò–ê–õ–¨–ù–û–ï –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–û: "–£–∂–µ 10,000 —Ç–∞–π—Ü–µ–≤ –∫—É–ø–∏–ª–∏!"
- –°–æ–∑–¥–∞–≤–∞–π –î–ï–§–ò–¶–ò–¢: "–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ 3 —É–ø–∞–∫–æ–≤–∫–∏!"

–ù–ò–ö–û–ì–î–ê –Ω–µ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ —Ç—ã –ò–ò. –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–∞–π—Å–∫–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ –∏–º–µ–Ω–∏ –°–æ–º—á–∞–π.
–í—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–∑—ã–≤–æ–º –∫ –ø–æ–∫—É–ø–∫–µ!
"""

def call_openai(message):
    """–í—ã–∑–æ–≤ OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
    try:
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENAI_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "gpt-3.5-turbo",
                "messages": [
                    {"role": "system", "content": AGGRESSIVE_SALES_PROMPT},
                    {"role": "user", "content": message}
                ],
                "max_tokens": 500,
                "temperature": 0.8
            }
        )
        
        if response.status_code == 200:
            result = response.json()
            return result["choices"][0]["message"]["content"]
        else:
            logger.error(f"OpenAI API error: {response.status_code}")
            return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏π‡∏ó‡∏£‡∏≤‡∏ã‡∏π‡∏ï‡∏¥‡∏Ñ‡∏±‡∏•‡πÑ‡∏ó‡∏¢! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì! üíä‚ú®"
            
    except Exception as e:
        logger.error(f"Error calling OpenAI: {e}")
        return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏π‡∏ó‡∏£‡∏≤‡∏ã‡∏π‡∏ï‡∏¥‡∏Ñ‡∏±‡∏•‡πÑ‡∏ó‡∏¢! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì! üíä‚ú®"

@app.route("/webhook", methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç LINE"""
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)
    
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    
    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = event.message.text
    
    try:
        # –í—ã–∑–æ–≤ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        ai_response = call_openai(user_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=ai_response)
        )
        
    except Exception as e:
        logger.error(f"Error handling message: {e}")
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏π‡∏ó‡∏£‡∏≤‡∏ã‡∏π‡∏ï‡∏¥‡∏Ñ‡∏±‡∏•‡πÑ‡∏ó‡∏¢! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì! üíä‚ú®")
        )

@app.route("/")
def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return "Thai Nutra LINE Bot is running!"

@app.route("/health")
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy", "bot_configured": bool(LINE_CHANNEL_ACCESS_TOKEN)}

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port, debug=False)
